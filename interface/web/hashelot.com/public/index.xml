<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hashelot - Decentralized ventures</title>
    <link>/</link>
    <description>Recent content on Hashelot - Decentralized ventures</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Nov 2020 01:02:03 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Delphi [Beta testing] - A comprehensive list of Delphi&#39;s Oracles</title>
      <link>/dapps/delphi/oraclesList/</link>
      <pubDate>Sun, 01 Nov 2020 01:02:03 +0100</pubDate>
      
      <guid>/dapps/delphi/oraclesList/</guid>
      <description>Here&amp;rsquo;s a list of all the Oracles of Delphi, but if you want you can go back to Delphi&amp;rsquo;s Hall.
  function htmlEntities(str) { return String(str).replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(//g, &#39;&amp;gt;&#39;).replace(/&#34;/g, &#39;&amp;quot;&#39;); } function paintMeOracle(_minimumReward, _contract, _curr_account){ if(isNaN(_minimumReward)){ console.error(&#39;To become an Oracle, you need to input a number as the minimum reward!&#39;); }else{ const offering = 10**15; var amount; if (_minimumReward == &#39;&#39;){ amount = 1; }else{ amount = web3.utils.toWei(_minimumReward); if (amount{ console.</description>
    </item>
    
    <item>
      <title>Supported wallets</title>
      <link>/wallets/</link>
      <pubDate>Sun, 01 Nov 2020 01:02:03 +0100</pubDate>
      
      <guid>/wallets/</guid>
      <description>So far it&amp;rsquo;s just MetaMask.</description>
    </item>
    
    <item>
      <title>BytesMath - A different approach to mathematics</title>
      <link>/utilities/BytesMath/</link>
      <pubDate>Thu, 15 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/utilities/BytesMath/</guid>
      <description>A library for mathematical operations with numbers expressed as bytes. So far it&amp;rsquo;s mainly just an idea.</description>
    </item>
    
    <item>
      <title>Chronicles - Notarization on the Ethereum blockchain</title>
      <link>/dapps/chronicles/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/dapps/chronicles/</guid>
      <description>A smart contract for setting customized and permanent checkpoints on the blockchain.
So far, just an idea.</description>
    </item>
    
    <item>
      <title>Crypto advocacy</title>
      <link>/notes/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/notes/</guid>
      <description>Not ready yet.</description>
    </item>
    
    <item>
      <title>Delphi [Beta testing] - Be your own oracle, sort of</title>
      <link>/dapps/delphi/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/dapps/delphi/</guid>
      <description>Hashelot&amp;rsquo;s Delphi is a DoaaS (Distributed oracle as a service) smart contract written in Solidity and currently in beta testing on the Ropsten network, that lets you become and advertise yourself as an Oracle. No token needed.
Each question or answer is limited to 32 characters1, every Oracle has a minimum reward that inquirers need to grant in order to ask them something.
Delphi gets 0.1% of each reward.
Code and deployment specs Solidity code: Hashelot Delphi (GitHub).</description>
    </item>
    
    <item>
      <title>Delphi [Beta testing] - Oracle&#39;s page</title>
      <link>/dapps/delphi/singleOracle/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/dapps/delphi/singleOracle/</guid>
      <description>A complete record of the Oracle&amp;rsquo;s activity.
 function htmlEntities(str) {return String(str).replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(//g, &#39;&amp;gt;&#39;).replace(/&#34;/g, &#39;&amp;quot;&#39;);}function consultOracle(_contract, _curr_account, _oracle, _answerKind, _reward, _question){consultOracle:{if (isNaN(_reward)){ console.error(&#39;To consult the Oracle, you need to input a number as a reward!&#39;);break consultOracle;}else{const amount = web3.utils.toWei(_reward); var _kind;if (_answerKind == 1 || _answerKind == 0){_kind = _answerKind;}else{console.error(&#39;The answer can only be either open (1) or closed (0)!</description>
    </item>
    
    <item>
      <title>Explore our research activity</title>
      <link>/research/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/research/</guid>
      <description>Not ready yet.</description>
    </item>
    
    <item>
      <title>Shelter - You&#39;d better keep that precious Ether safe</title>
      <link>/dapps/shelter/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/dapps/shelter/</guid>
      <description>A set of tools for better keeping your precious Ether safe such as time locks, password safes, and trading protocols.
Coming a bit less soon.</description>
    </item>
    
    <item>
      <title>What we have done so far</title>
      <link>/showcase/</link>
      <pubDate>Thu, 01 Oct 2020 01:02:03 +0100</pubDate>
      
      <guid>/showcase/</guid>
      <description>Not ready yet.</description>
    </item>
    
    <item>
      <title>[Day] Rings - A simple stacking game, just longer</title>
      <link>/games/dayrings/</link>
      <pubDate>Wed, 15 Jul 2020 17:09:00 +0100</pubDate>
      
      <guid>/games/dayrings/</guid>
      <description>The same rules of Rings apply, but with a longer gameplay: 5749 blocks to conclude a round, making it last around 24 hours.
  function depositWage(cash, _contract, _curr_account){ if(isNaN(cash)){ console.error(&#39;To play [Day] Rings, you need to input a number!&#39;); }else{ const amount = web3.utils.toWei(cash); console.log(_curr_account); _contract.methods.depositStack().estimateGas({from: _curr_account, value:amount}).then(gasEstimate = { _contract.methods.depositStack().send({from: _curr_account, value:amount, gas: gasEstimate},function(error, result){ if(!error) console.log(result); else console.error(error); }); }); } } function winnerSelection(_contract, _curr_account){ console.log(_curr_account); _contract.methods.closeBet().estimateGas({from: _curr_account, value: 0}).</description>
    </item>
    
    <item>
      <title>Entropy - A case for on-chain randomness</title>
      <link>/utilities/entropy/</link>
      <pubDate>Fri, 12 Jun 2020 10:53:25 +0100</pubDate>
      
      <guid>/utilities/entropy/</guid>
      <description>Entropy is an intellectual exercise, a smart contract (hashelot_entropy_v.1.0.sol) in which you will find the callable (i.e. you don&amp;rsquo;t need gas to use it) method randomics() that returns a value in
$$ [0,2^{256}-1], $$
mimicking a random generator1.
Transaction hash: 0x80d370b146&amp;hellip;2f978ae329.
The way another contract might use randomics() is then up to the developer. As an example, the following button generates and displays a value in
$$ [0,1] $$
by an off-chain evaluation of</description>
    </item>
    
    <item>
      <title>Ropsten test Rings</title>
      <link>/games/test_rings/</link>
      <pubDate>Sat, 06 Jun 2020 14:54:33 +0100</pubDate>
      
      <guid>/games/test_rings/</guid>
      <description>function depositWage(cash, _contract, _curr_account){ if(isNaN(cash)){ console.error(&#39;To play Rings, you need to input a number!&#39;); }else{ const amount = web3.utils.toWei(cash); console.log(_curr_account); _contract.methods.depositStack().estimateGas({from: _curr_account, value:amount}).then(gasEstimate = { _contract.methods.depositStack().send({from: _curr_account, value:amount, gas: gasEstimate},function(error, result){ if(!error) console.log(result); else console.error(error); }); }); } } function winnerSelection(_contract, _curr_account){ console.log(_curr_account); _contract.methods.closeBet().estimateGas({from: _curr_account, value: 0}).then(gasEstimate = { _contract.methods.closeBet().send({from: _curr_account, value: 0, gas: gasEstimate},function(error, result){ if(!error) console.log(result); else console.error(error); }); }); }  var gameTime = 12; var current_network = 3; var networkWarning = &#39;To play Ropsten test Rings, set your MetaMask network on the Ropsten one.</description>
    </item>
    
    <item>
      <title>Rings - A simple stacking game</title>
      <link>/games/rings/</link>
      <pubDate>Sat, 06 Jun 2020 14:54:00 +0100</pubDate>
      
      <guid>/games/rings/</guid>
      <description>Rings is a stacking game written in Solidity and deployed on the Ethereum main network, whose game play you can audit straight out of the blockchain. The contract has been verified on Etherscan on 2020-06-06.
You may also test it out on Ropsten.
  function depositWage(cash, _contract, _curr_account){ if(isNaN(cash)){ console.error(&#39;To play Rings, you need to input a number!&#39;); }else{ const amount = web3.utils.toWei(cash); console.log(_curr_account); _contract.methods.depositStack().estimateGas({from: _curr_account, value:amount}).then(gasEstimate = { _contract.</description>
    </item>
    
  </channel>
</rss>